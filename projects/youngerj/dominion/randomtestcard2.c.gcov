        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <string.h>
        -:    7:#include <time.h>
        -:    8:#include <assert.h>
        -:    9:
        1:   10:void testCard(){
        1:   11:	int numTests = 100;
        -:   12:	int numPlayers;
        -:   13:	struct gameState game;
        1:   14:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   15:	int testsFailed = 0;
        -:   16:
        -:   17:
        1:   18:	printf("Village Card Test Start\n");
        -:   19:
        1:   20:	srand(time(NULL));
        -:   21:
      101:   22:	for(int i = 0; i < numTests; i++){
      100:   23:		printf("Test #%d:\n",i+1);
        -:   24:
        -:   25:		// Set up test game
      100:   26:		numPlayers = rand() % 3 + 2;
      100:   27:		memset(&game,23,sizeof(struct gameState));
      100:   28:		initializeGame(numPlayers,k,1,&game);
        -:   29:	
      403:   30:		for(int j = 0; j < numPlayers;j++){
        -:   31:
        -:   32:			// Set up random numbers of cards
      303:   33:			game.deckCount[j] = rand() % 21 + 5;
      303:   34:			game.handCount[j] = rand() % 8 + 3;
      303:   35:			game.discardCount[j] = rand() % 8 + 2;
        -:   36:		
        -:   37:			// Randomize deck
     5004:   38:			for(int l = 0; l < game.deckCount[j];l++){
     4701:   39:				if(rand() % 3 == 0){
     1583:   40:					game.deck[j][l] = rand() % 3 + 1;
        -:   41:				}
        -:   42:				else{
     3118:   43:					game.deck[j][l] = k[rand() % 10];
        -:   44:				}
        -:   45:			}
        -:   46:
        -:   47:
        -:   48:			// Randomize Hand
     2308:   49:			for(int l = 0; l < game.handCount[j];l++){
     2005:   50:				if(rand() % 3 == 0){
      663:   51:					game.hand[j][l] = rand() % 3 + 1;
        -:   52:				}
        -:   53:				else{
     1342:   54:					game.hand[j][l] = k[rand() % 10];
        -:   55:				}
        -:   56:			}
        -:   57:
        -:   58:			// Randomize discard
     1933:   59:			for(int l = 0; l < game.discardCount[j]; l++){
     1630:   60:				if(rand() % 3 == 0){
      575:   61:					game.discard[j][l] = rand() % 3 + 1;
        -:   62:				}
        -:   63:				else{
     1055:   64:					game.discard[j][l] = k[rand() % 10];
        -:   65:				}
        -:   66:			}
        -:   67:		}
        -:   68:
        -:   69:		// Put an adventurer in a players hand
      100:   70:		game.whoseTurn = 0;
      100:   71:		int villageCardPos = rand() % (game.handCount[0]);
      100:   72:		game.hand[0][villageCardPos] = village;
        -:   73:
        -:   74:		// Store counts before playing the card, for testing purposes	
        -:   75:		int deckCount[4];
        -:   76:		int handCount[4];
        -:   77:		int discardCount[4];
      100:   78:		int numActions = game.numActions;
      403:   79:	       	for(int a = 0; a < numPlayers;a++){
      303:   80:			deckCount[a] = game.deckCount[a];
      303:   81:			handCount[a] = game.handCount[a];
      303:   82:			discardCount[a] = game.discardCount[a];
        -:   83:		}	
        -:   84:
      100:   85:		int playCard = cardEffect(village, 0, 0, 0, &game, 1, 0);
        -:   86:
      100:   87:		if(playCard){
    #####:   88:			printf("Failed to play village card!\n");
    #####:   89:			testsFailed = 1;
        -:   90:		}
        -:   91:		else{
      100:   92:			printf("Succesfully played village card!\n");
        -:   93:		}
        -:   94:
      100:   95:		if(game.numActions != numActions + 2){
    #####:   96:			printf("Failed to add two actions \n");
    #####:   97:			testsFailed = 1;
        -:   98:		}
        -:   99:		else{
      100:  100:			printf("Succesfully added two actions. \n");
        -:  101:		}
        -:  102:
      100:  103:		if(game.handCount[0] != handCount[0] + 1){
      100:  104:			printf("Failed to draw one card.\n");
      100:  105:			testsFailed = 1;
        -:  106:		}
        -:  107:		else{
    #####:  108:			printf("Succesfully drew one card. \n");
        -:  109:		}
        -:  110:
      100:  111:		if(game.discardCount[0] <= discardCount[0] + 1){
      100:  112:			printf("Failed to discard. \n");
      100:  113:			testsFailed = 1;
        -:  114:		}
        -:  115:		else{
    #####:  116:			printf("Succesfully discarded. \n");
        -:  117:		}
        -:  118:
      303:  119:		for(int j = 1; j < numPlayers; j++){
        -:  120:		
      203:  121:			if(game.deckCount[j] != deckCount[j]){
    #####:  122:				printf("ERROR: Player %d's deck was changed and it shouldn't have been!\n",j+1);
    #####:  123:				testsFailed = 1;
        -:  124:			}
        -:  125:			else{
      203:  126:				printf("Player %d's deck was unchanged.\n",j);
        -:  127:			}
        -:  128:
      203:  129:			if(game.handCount[j] != handCount[j]){
    #####:  130:				printf("ERROR: Player %d's, hand was changed and it shouldn't have been!\n",j);
    #####:  131:				testsFailed = 1;
        -:  132:			}
        -:  133:			else{
      203:  134:				printf("Player %d's hand was unchanged.\n",j);
        -:  135:			}
        -:  136:
      203:  137:			if(game.discardCount[j] != discardCount[j]){
    #####:  138:				printf("ERROR: Player %d's hand was changed and it shouldn't have been! \n",j);
    #####:  139:				testsFailed = 1;
        -:  140:			}
        -:  141:			else{
      203:  142:				printf("Player %d's hand was unchanged.\n",j);
        -:  143:			}
        -:  144:		}
        -:  145:	}	
        -:  146:
        1:  147:	if(testsFailed == 0){
    #####:  148:		printf("All tests passed!\n");
        -:  149:	}
        -:  150:	else{
        1:  151:		printf("Some tests failed..\n");
        -:  152:	}
        -:  153:
        1:  154:}
        -:  155:
        1:  156:int main(){
        1:  157:	testCard();
        -:  158:
        1:  159:	return 0;
        -:  160:}
